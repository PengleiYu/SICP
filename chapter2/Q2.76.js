// 三种设计风格优劣对比
(function () {
    // 练习2.76 包含通用型操作的大型系统也可能不断演化，在演化中经常需要加入新的数据对象类型或者新的操作。
    // 请针对上面提出的三种策略——采用显式分派的通用型操作、数据导向的风格，以及消息传递的风格——分别说明在加入一个新类型或者新操作时，
    // 我们必须对系统做哪些修改。哪种组织方式最适合经常需要加入新类型的系统？哪种组织方式最适合经常需要加入新操作的系统？


    // 1. 显式分派（Explicit Dispatch）
    // 添加新类型：需要修改所有通用操作函数，添加新的条件分支。每次新增类型时，所有现有操作都必须更新，维护成本高。
    // 添加新操作：需要新建一个函数，并在其中处理所有现有类型。若类型数量多，容易遗漏或出错。
    // 适用场景：不适合频繁添加新类型或新操作的系统。
    // 2. 数据导向风格（Data-Directed）
    // 添加新类型：为新类型注册所有现有操作的实现到表格中，无需修改现有代码。模块化较好，但需确保所有操作均被覆盖。
    // 添加新操作：为所有现有类型注册该操作的实现。虽然需逐个处理类型，但可通过模块化逐步添加，灵活性较高。
    // 适用场景：最适合经常添加新操作，因新操作的实现可分散到各类型中，避免集中修改。
    // 3. 消息传递风格（Message-Passing）
    // 添加新类型：定义新类型时直接包含所有操作的实现，无需修改其他代码。类型独立性强，扩展性最佳。
    // 添加新操作：所有现有类型必须修改以支持新操作的消息，维护成本极高。
    // 适用场景：最适合经常添加新类型，因新类型的实现完全独立，无需全局修改。
    // 结论
    // 经常添加新类型：选择消息传递风格。每个新类型独立实现所需操作，无需全局调整。
    // 经常添加新操作：选择数据导向风格。新操作的实现可模块化注册，避免集中修改代码。
})();
